# -*- coding: utf-8 -*-
"""Logistic Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VgE3PkL5V2ljUjZLzIcuMEs52wJGag3o
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Logistic Regression.csv')

x = df.iloc[:,:2].values

y = df.iloc[:,-1].values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split( x,y,test_size = 0.2,random_state = 1)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

from sklearn.linear_model import LogisticRegression
classifier  = LogisticRegression(random_state= 1)
classifier.fit(x_train,y_train)

classifier.predict(sc.transform([[31,89999]]))

classifier.predict_proba(sc.transform([[31,89999]]))

classifier.predict_log_proba(sc.transform([[31,89999]]))

y_pred = classifier.predict(x_test).reshape(-1,1)

y_pred

y_test = y_test.reshape(-1,1)

y_test

np.concatenate((y_test,y_pred),axis = 1).shape

from sklearn.metrics import ConfusionMatrixDisplay,accuracy_score,precision_score
ConfusionMatrixDisplay.from_predictions(y_test, y_pred)

precision_score(y_test, y_pred)

accuracy_score(y_test, y_pred)

#@title Visualizing the Test Set
from matplotlib.colors import ListedColormap
x_set, y_set = sc.inverse_transform(x_train), y_train
X1, X2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 10, stop = x_set[:, 0].max() + 10, step = 0.25),
                     np.arange(start = x_set[:, 1].min() - 1000, stop = x_set[:, 1].max() + 1000, step = 0.25))
plt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('salmon', 'dodgerblue')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
unique_labels = np.unique(y_set)
colors = ListedColormap(('salmon', 'dodgerblue'))
for i in range(len(unique_labels)):
  labels = unique_labels[i]
  indices = np.where(y_set == labels)
  x_values = x_set[indices,0]
  y_values = x_set[indices,1]
  color = colors(i)
  plt.scatter(x_values, y_values, label = labels, c =color )
plt.colorbar()
plt.legend()
plt.show()

from matplotlib.colors import ListedColormap
x2_test, y2_test = sc.inverse_transform(x_test), y_test
X3,X4 = np.meshgrid(np.arange(start = x2_test[:,0].min()-10,stop = x2_test[:,0].max()+10,step = 0.25),np.arange(start = x2_test[:,1].min()-1000,stop = x2_test[:,1].max()+1000,step = 1000))
X5 = classifier.predict(sc.transform(np.array([X3.ravel(),X4.ravel()]).T)).reshape(X1.shape)
plt.contourf(X3,X4,X5, alpha = 0.75, cmap = ListedColormap(('salmon', 'dodgerblue')))
unique_labels_test = np.unique(y_test)
colors = ListedColormap(('salmon', 'dodgerblue'))
for i in range(len(unique_labels_test)):
  labels = unique_labels_test[i]
  indices = np.where(y_test == labels)
  x_values_test = x2_test[indices,0]
  y_values_test = x2_test[indices,1]
  colour = colors(i)
  plt.scatter(x_values_test,y_values_test,c = colour,label = labels)
plt.legend()
plt.colorbar()
plt.show()